{
    "root": true,
    "env": {
        "node": true,
        "es2022": true
    },
    "parserOptions": {
        "project": "./tsconfig.json",
        "ecmaVersion": "latest",
        "sourceType": "module"
    },
    "extends": ["eslint:recommended"],
    "ignorePatterns": [
        "dist/**/*",
        "node_modules/**/*",
        "src/db/postgres/entity/*"
    ],
    "settings": {
        "import/resolver": {
            "node": {
                "extensions": [".js", ".ts"]
            }
        },
        "import/parsers": {
            "@typescript-eslint/parser": [".ts"]
        }
    },
    "overrides": [
        {
            "files": ["**/*.ts"],
            "extends": ["plugin:@typescript-eslint/recommended"],
            "parser": "@typescript-eslint/parser",
            "plugins": ["@typescript-eslint", "import"],
            "rules": {
                "no-console": "warn",
                "@typescript-eslint/method-signature-style": "error",
                "@typescript-eslint/switch-exhaustiveness-check": "error",
                "@typescript-eslint/prefer-string-starts-ends-with": "error",
                "@typescript-eslint/prefer-optional-chain": "error",
                "@typescript-eslint/prefer-includes": "error",
                "@typescript-eslint/no-unused-vars": "error",
                "@typescript-eslint/no-explicit-any": "error",
                "@typescript-eslint/no-duplicate-type-constituents": "error",
                "@typescript-eslint/no-base-to-string": "error",
                "@typescript-eslint/no-unsafe-return": "error",
                "@typescript-eslint/no-unsafe-assignment": "error",
                "@typescript-eslint/no-unnecessary-type-constraint": "error",
                "@typescript-eslint/no-empty-interface": "error",
                "@typescript-eslint/no-empty-function": "error",
                "@typescript-eslint/no-import-type-side-effects": "error",
                "@typescript-eslint/no-useless-empty-export": "error",
                "@typescript-eslint/explicit-function-return-type": "error",
                "@typescript-eslint/consistent-type-definitions": "error",
                "@typescript-eslint/consistent-type-exports": "error",
                "@typescript-eslint/consistent-type-imports": "error",
                "@typescript-eslint/explicit-member-accessibility": [
                    "error",
                    {
                        "accessibility": "explicit",
                        "overrides": {
                            "accessors": "off",
                            "constructors": "no-public",
                            "methods": "explicit",
                            "properties": "explicit",
                            "parameterProperties": "explicit"
                        }
                    }
                ],
                "@typescript-eslint/typedef": [
                    "error",
                    {
                        "arrowParameter": true, // 箭頭函數的參數
                        "parameter": true // 函數的參數
                        // "variableDeclaration": true, // 變數宣告
                        // "arrayDestructuring": true, // 陣列解構賦值
                        // "objectDestructuring": true, // 物件解構賦值
                        // "memberVariableDeclaration": true, // 類別中的變數（private, protected）
                        // "propertyDeclaration": true // 類別中的變數（public）
                    }
                ],
                "@typescript-eslint/member-ordering": [
                    "error",
                    {
                        "default": [
                            "signature",
                            "field",
                            "constructor",
                            "method"
                        ]
                    }
                ],
                "@typescript-eslint/member-delimiter-style": [
                    "error",
                    {
                        "multiline": {
                            "delimiter": "comma",
                            "requireLast": true
                        },
                        "singleline": {
                            "delimiter": "comma",
                            "requireLast": false
                        },
                        "multilineDetection": "brackets"
                    }
                ],
                "@typescript-eslint/naming-convention": [
                    "error",
                    {
                        "selector": "interface",
                        "format": ["PascalCase"],
                        "custom": {
                            "regex": "^I[A-Z]",
                            "match": true
                        }
                    },
                    {
                        "selector": ["typeLike", "enumMember"],
                        "format": ["PascalCase"]
                    },
                    {
                        "selector": "default",
                        "format": ["camelCase"]
                    }
                ]
            }
        }
    ],
    "rules": {
        "no-unused-vars": "error",
        "no-empty-function": [
            "error",
            {
                "allow": ["constructors"]
            }
        ],
        "no-multiple-empty-lines": [
            "error",
            {
                "max": 1,
                "maxBOF": 0,
                "maxEOF": 0
            }
        ],
        "curly": "error",
        "brace-style": ["error", "stroustrup"],
        "eqeqeq": "error",
        "quotes": "error",
        "semi": "error",
        "dot-notation": "error",
        "func-style": "error",
        "prefer-arrow-callback": "error",
        "import/order": [
            "error",
            {
                "groups": [
                    "type",
                    "builtin", // Built-in imports (come from NodeJS native) go first
                    "external", // <- External imports
                    "internal", // <- Absolute imports
                    ["sibling", "parent"], // <- Relative imports, the sibling and parent types they can be mingled together
                    "index", // <- index imports
                    "unknown" // <- unknown
                ],
                "newlines-between": "always",
                "alphabetize": {
                    /* sort in ascending order. Options: ["ignore", "asc", "desc"] */
                    "order": "asc",
                    /* ignore case. Options: [true, false] */
                    "caseInsensitive": true
                }
            }
        ],
        "import/newline-after-import": "error",
        "import/no-default-export": "error",
        "import/no-empty-named-blocks": "error",
        "import/no-self-import": "error",
        "import/no-unassigned-import": "error",
        "import/no-useless-path-segments": "error"
    }
}
